---
title: "Class 7: Machine Learning 1"
author: "Isabel Philip (A16855684)"
format: pdf
---

Today,we will explore unsupervised machine learning methods including clustering and dimensionality reduction methods. 

Let's start by making up some data (where we know there are clear groups) that we can use to test out different clustering methods. 

We can use the `rnorm()` function to help us here: 

```{r}
hist(rnorm(n=3000, mean= 3))
```

Make data `z` with two "clusters"

```{r}
x <- c(rnorm(30, mean = -3),
rnorm(30, mean = 3))

z <- cbind(x=x, rev(x))
head(z)

plot(z)
```
## K-means Clustering 

The main function in "base" R for K-means clustering is called `kmeans()`

```{r}
k <- kmeans(z, centers =2)
k
```
How big is `z`? 
```{r}
c(nrow(z), ncol(z))
```

```{r}
attributes(k)
```

> Q. How many points lie in each cluster? 

```{r}
k$size
```

> Q. What component of our results tells us about the cluster membershop (i.e. which point lies in which cluster?)

```{r}
k$cluster
```
> Q. Center of each cluster? 

```{r}
k$centers
```

> Q. Put this result info together and make a little "base R" plot of our clustering. Also add the cluster center points to this plot. 

```{r}
plot(z, col = c("blue", "red"))
```

You can color by number
```{r}
plot(z, col = c(1, 2))
```

Plot colored by cluster membership: 

```{r}
plot(z, col = c(k$cluster))
points(k$centers, col = "blue", pch = 15)
```

> Q. Run kmeans on our input `z` and define 4 clusters making the same result vizulation plot as above (plot of z colored by cluster membership )

```{r}
k4 <- kmeans(z, centers =4)
plot(z, col = c(k4$cluster))
points(k$centers, col = "blue", pch = 15)
```
```{r}
k4$totss
```

## Hierarchical Clustering 

The main function in base R for this called `hclust()`. It will take as input a distance matrix (key point is that you can't just give your "raw" data as input - you have to first calculate a distance matrix from your data)

```{r}
d <- dist(z)
hc <- hclust(d)
hc
```

```{r}
plot(hc)
abline(h=10, col = "red")
```

Once I inspect the "tree", I can "cut" the tree to yield my groupings/ clusters. The function that can do this is called `cutree()`

```{r}
grps<- cutree(hc, h=10)
```

```{r}
plot(z, col=grps)
```

## Hands on with PCA- Principal Component Analysis 

Let's examine some silly 17-dimension data detailing food consumption in the UK (England, Scotland, Wales, and N. Ireland).Are these countries eating habits different or similar to each other? 

```{r}
url <- "https://tinyurl.com/UK-foods"
x <- read.csv(url, row.names =1)
#x
```

> Q1. How many rows and columns are in your new data frame named x? What R functions could you use to answer this questions?

```{r}
nrow(x)
ncol(x)
```
#can also use the dim() function to get the same answer

> Q5: Generating all pairwise plots may help somewhat. Can you make sense of the following code and resulting figure? What does it mean if a given point lies on the diagonal for a given plot?

```{r}
pairs(x, col=rainbow(10), pch=16)
```
Diagonal refers to the Y axis. For the first 3 plots in the first row, is England for example. Plots of all the countries vs. all the countries. If a point lies on a straight line, there are similar amounts of food consumption in both countries. If they aren't, there is more/ less consumed than in the comparing country. 


Looking at these types of "pairwise plots" can be helpful but it does not scale well and kind of sucks! There must be a better way.. 

### PCA to the Rescue! 

The main function of PCA in base R is called `prcomp()`. This function wants the transpose our input data - i.e. the important food categories in as columns, not rows. 

```{r}
pca <- prcomp(t(x))
summary(pca)
```

Let's see what is in our PCA result object `pca`. 

```{r}
attributes(pca)
```

The `pca$x` result is where we will focus first as this details how the countries are related to eeach other in terms of our new "axis" (a.k.a "PCs". "eigenvectors", etc.)

```{r}
head(pca$x)
```

```{r}
plot(pca$x[,1], pca$x[,2], pch=16, col = c("orange", "red", "blue", "darkgreen"), xlab = "PC1", ylab = "PC2")
```

We can look at the so-called PC "loadings" result object to see how the original foods contribute to our new PCs (i.e. how the original variables contribute to our new better PC varaibles)

```{r}
pca$rotation[,1]
```
>[,1] is PC1

## Digging deeper (variable loadings)
```{r}
par(mar=c(10, 3, 0.35, 0))
barplot( pca$rotation[,1], las=2 )
```
